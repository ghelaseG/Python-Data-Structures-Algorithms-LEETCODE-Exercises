>> is the arithmetic (or signed) right shift operator.
>>> is the logical (or unsigned) right shift operator.
<< is the left shift operator, and meets the needs of both logical and arithmetic shifts.

1. Left shift (<<)

Integers are stored, in memory, as a series of bits. For example, the number 6 stored as a 32-bit int would be:

00000000 00000000 00000000 00000110
Shifting this bit pattern to the left one position (6 << 1) would result in the number 12:

00000000 00000000 00000000 00001100
As you can see, the digits have shifted to the left by one position, and the last digit on the right is filled with a zero. You might also note that shifting left is equivalent to multiplication by powers of 2. So 6 << 1 is equivalent to 6 * 2, and 6 << 3 is equivalent to 6 * 8. A good optimizing compiler will replace multiplications with shifts when possible.


2. Logical right shift (>>>)

A logical right shift is the converse to the left shift. Rather than moving bits to the left, they simply move to the right. For example, shifting the number 12:

00000000 00000000 00000000 00001100
to the right by one position (12 >>> 1) will get back our original 6:

00000000 00000000 00000000 00000110
So we see that shifting to the right is equivalent to division by powers of 2.


3. Arithmetic right shift (>>)
The arithmetic right shift is exactly like the logical right shift, except instead of padding with zero, it pads with the most significant bit. This is because the most significant bit is the sign bit, or the bit that distinguishes positive and negative numbers. By padding with the most significant bit, the arithmetic right shift is sign-preserving.

For example, if we interpret this bit pattern as a negative number:

10000000 00000000 00000000 01100000
we have the number -2,147,483,552. Shifting this to the right 4 positions with the arithmetic shift (-2,147,483,552 >> 4) would give us:

11111000 00000000 00000000 00000110
or the number -134,217,722.

So we see that we have preserved the sign of our negative numbers by using the arithmetic right shift, rather than the logical right shift. And once again, we see that we are performing division by powers of 2.

4. AND operator ( & )
https://medium.com/biffures/part-2-the-beauty-of-bitwise-and-or-cdf1d8d87891#.qwpq69ewr

5. OR operator ( | )
https://medium.com/biffures/part-3-or-and-20ccc9938f05#.14o470vqk

6. Bitwise Patterns
https://medium.com/biffures/part-4-bitwise-patterns-7b17dae3eee0

7. Real world use cases of bitwise operators
https://stackoverflow.com/questions/2096916/real-world-use-cases-of-bitwise-operators

8. 10 Bitwise Tricks and Tips
https://www.youtube.com/watch?v=LGrE0siZ-ZA&ab_channel=TLEEliminators-byPriyansh